import React, { useRef, useState, useEffect } from 'react';
import { extend, useThree, useFrame } from 'react-three-fiber';
import { WebGLMultisampleRenderTarget, RGBAFormat, sRGBEncoding } from 'three';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';
import { GammaCorrectionShader } from 'three/examples/jsm/shaders/GammaCorrectionShader';

extend({
  EffectComposer,
  RenderPass,
  ShaderPass
});
const isWebGL2Available = () => {
  try {
    var canvas = document.createElement('canvas');
    return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));
  } catch (e) {
    return false;
  }
};
function Effects({
  children,
  multisamping = 8,
  renderIndex = 1
}) {
  const composer = useRef();
  const {
    scene,
    camera,
    gl,
    size
  } = useThree();
  const [target] = useState(() => {
    if (isWebGL2Available() && multisamping > 0) {
      const t = new WebGLMultisampleRenderTarget(size.width, size.height, {
        format: RGBAFormat,
        encoding: sRGBEncoding
      });
      t.samples = 8;
      return t;
    }
  });
  useEffect(() => {
    var _composer$current, _composer$current2;

    (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height);
    (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.setPixelRatio(gl.getPixelRatio());
  }, [gl, size]);
  useFrame(() => {
    var _composer$current3;

    return (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.render();
  }, renderIndex);
  return /*#__PURE__*/React.createElement("effectComposer", {
    ref: composer,
    args: [gl, target]
  }, /*#__PURE__*/React.createElement("renderPass", {
    attachArray: "passes",
    args: [scene, camera]
  }), /*#__PURE__*/React.createElement("shaderPass", {
    attachArray: "passes",
    args: [GammaCorrectionShader]
  }), children);
}

export { Effects, isWebGL2Available };
