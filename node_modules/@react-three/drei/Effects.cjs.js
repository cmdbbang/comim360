'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var reactThreeFiber = require('react-three-fiber');
var THREE = require('three');
var EffectComposer = require('three/examples/jsm/postprocessing/EffectComposer');
var RenderPass = require('three/examples/jsm/postprocessing/RenderPass');
var ShaderPass = require('three/examples/jsm/postprocessing/ShaderPass');
var GammaCorrectionShader = require('three/examples/jsm/shaders/GammaCorrectionShader');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

reactThreeFiber.extend({
  EffectComposer: EffectComposer.EffectComposer,
  RenderPass: RenderPass.RenderPass,
  ShaderPass: ShaderPass.ShaderPass
});
var isWebGL2Available = function isWebGL2Available() {
  try {
    var canvas = document.createElement('canvas');
    return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));
  } catch (e) {
    return false;
  }
};
function Effects(_ref) {
  var children = _ref.children,
      _ref$multisamping = _ref.multisamping,
      multisamping = _ref$multisamping === void 0 ? 8 : _ref$multisamping,
      _ref$renderIndex = _ref.renderIndex,
      renderIndex = _ref$renderIndex === void 0 ? 1 : _ref$renderIndex;
  var composer = React.useRef();

  var _useThree = reactThreeFiber.useThree(),
      scene = _useThree.scene,
      camera = _useThree.camera,
      gl = _useThree.gl,
      size = _useThree.size;

  var _useState = React.useState(function () {
    if (isWebGL2Available() && multisamping > 0) {
      var t = new THREE.WebGLMultisampleRenderTarget(size.width, size.height, {
        format: THREE.RGBAFormat,
        encoding: THREE.sRGBEncoding
      });
      t.samples = 8;
      return t;
    }
  }),
      target = _useState[0];

  React.useEffect(function () {
    var _composer$current, _composer$current2;

    (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height);
    (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.setPixelRatio(gl.getPixelRatio());
  }, [gl, size]);
  reactThreeFiber.useFrame(function () {
    var _composer$current3;

    return (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.render();
  }, renderIndex);
  return /*#__PURE__*/React__default['default'].createElement("effectComposer", {
    ref: composer,
    args: [gl, target]
  }, /*#__PURE__*/React__default['default'].createElement("renderPass", {
    attachArray: "passes",
    args: [scene, camera]
  }), /*#__PURE__*/React__default['default'].createElement("shaderPass", {
    attachArray: "passes",
    args: [GammaCorrectionShader.GammaCorrectionShader]
  }), children);
}

exports.Effects = Effects;
exports.isWebGL2Available = isWebGL2Available;
